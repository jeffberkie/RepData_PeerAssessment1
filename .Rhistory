cm <- colMeans(my_pois)
hist(cm)
dl <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class()
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
mounths(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(Cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
library(datasets)
str(airquality)
letters
system.time()
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {}
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(1000)
system.time(svd(x))
set.seed(1)
rpois(5, 2)
class(rpois(5, 2))
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?set.speed
??set.speed
?set
?set.seed
set.speed(10)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
?rnorm
y <- 0.5 + 2 * x + e
y
data(mtcars)
head(mtcars)
summary(mtcars)
library(xlsx)
install.packages("manipulate")
library(rJava)
install.packages(rJava)
xlsx
xlsx()
library(xlsx)
library(xlsx)
>data.table
?data.table
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
library(data.table)
install.packages("data.table")
library(data.table)
install.packages("data.table")
install.packages("data.table", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(data.table)
install.packages("Rtools")
library(datasets)
data(cars)
with(cars, plot(speed, dist))
install.packages("ggplot2")
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
x <- rnorm(100)
hist(X)
hist(x)
y <- rnorm(100)
plot(x, y)
par(mar = c(2,2,2,2))
plot(x, y)
par(mar = c(4,4,2,2))
plot(x, y)
plot(x, y, pch=20)
plot(x, y, pch=2)
plot(x, y, pch=4)
example(points)
plot(x, y, pch=4)
x <- rnorm(100)
plot(x, y, pch=4)
plot(x, y, pch=20)
title("Scatterplot")
text(-2, -2, "label")
legend("topleft", legend = "Data", pch = 20)
fit <- lm(x ~ y)
obline(fit)
?obline
??obline
library(ggplot2)
obline(fit)
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 3, col = "blue")
z <- rpois(100)
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch=20)
plot(x, z, pch=20)
par(mar = c(2,2,1,1))
plot(x, y, pch=20)
plot(x, z, pch=20)
par(mfrow = c(1, 2))
plot(x, y, pch=20)
plot(x, z, pch=20)
?lines
?par
dev.cur()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(Cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
in.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, ssize)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(RTools)
install.packages("RMySQL", type="source")
dbh <- dbConnect(MySQL(), user="account_name", password="password", host="127.0.0.1")
library(RMySQL)
install.packages("RMySQL", type="source")
install.packages("RMySQL", type = "source")
Sys,getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
Sys,getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
Sys,getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
install.packages("RMySQL", type="source")
install_github("rstats-db/RMySQL")
install_github("rstats-db/RMySQL")
install.packages("manipulate")
install.packages("DBI")
install_github("rstats-db/RMySQL")
library(RMySQL)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind. data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
set.seed(10)
x <- rnorm(!00)
f <- rep(0:!, each = 50)
f <- rep(0:1, each = 50)
y <- x + f -f * x + rnomr(100, sd = 0.5)
y <- x + f -f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
x <- rnorm(!00)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
library(ggplot2)
install.packages("RMySQL")
dbh <- dbConnect(MySQL(), user="account_name", password="password", host="127.0.0.1")
library(RMySQL)
dbh <- dbConnect(MySQL(), user="account_name", password="password", host="127.0.0.1")
dbh <- dbConnect(MySQL(), user="jeffberkie", password="aepi4247", host="127.0.0.1")
result <- dbGetQuery(dbh, "show databases;"); dbDisconnect(dbh)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = . ~ drv, binwdith = 2)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = . ~ drv, binwdith = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwdith = 2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
?axis
?llines
?splom
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?geom
??geom
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ")
htmlCode = readLines(con)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
close(con)
htmlCode
source(httr)
library(httr)
?png
myapp = oauth_app("github", key="703deb7524c15774d2dd", secret="91c504595b6c5b522d01daa832fdc38415de3f74")
close(con)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "703deb7524c15774d2dd",
secret = "91c504595b6c5b522d01daa832fdc38415de3f74")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
github_token
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "703deb7524c15774d2dd",
secret = "91c504595b6c5b522d01daa832fdc38415de3f74")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httpuv)
install.packages("httpuv")
myapp <- oauth_app("github", key = "703deb7524c15774d2dd", secret = "91c504595b6c5b522d01daa832fdc38415de3f74")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "703deb7524c15774d2dd", secret = "a25fb084d55765e6fcb0e79cbb55117732797577")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
names(req)
req$times
req$date
names(req$headers)
names(req$`ll_headers)
names(req$all_headers)
content(req$all_headers)
str(req)
jsoned <- fromJSON(req)
?json
??json
library(jsonlite)
jsoned <- fromJSON(req)
?toJSON
jsoned <- toJSON(req)
?fromJSON
jsoned <- fromJSON("https://api.github.com/users/jtleek/repos")
library(curl)
install.packages("curl")
jsoned <- fromJSON("https://api.github.com/users/jtleek/repos")
jsoned
names(jsoned)
class(jsoned)
jsoned$"created_at"
jsoned$"created_at"[1]
head(jsoned)
answer <- subset(jsoned$"created_at" == "data sharing")
answer <- subset(jsoned, jsoned$"created_at" == "data sharing")
answer <- subset(jsoned, jsoned$"created_at" == "datasharing")
answer <- subset(jsoned, jsoned$"created_at" == "data_sharing")
?subset
names(jsoned)
answer <- subset(jsoned, jsoned$"created_at"["data sharing"])
answer <- subset(jsoned$"created_at", jsoned$"name" == "data sharing")
answer <- subset(jsoned, jsoned$"name" == "data sharing")
answer <- subset(jsoned, jsoned$"name" == "datasharing")
answer
answer$"created_at"
address <- "https://s3.amazonaws.com/coursera-uploads/user-6fede57f5a0f5c24b5e843a2/973501/asst-3/379ac200024b11e5b6b1e9a57cc12969.txt"
address <- sub("^https", "http", address)
tidydata <- read.table(url(address), header = TRUE)
View(tidydata)
setwd("~/Coursera/05 Reproducible Research/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
head(activity)
summary(activity)
class(activity$interval)
?lubridate
library(lubdridate)
source(lubdridate)
library(lubridate)
?lubridate
class(activity$date)
?seconds
testdate <- activity$date[6]
testdate
head(activity)
activity$date[6]
as.POSIXct(activity$date[6])
testdate <- as.POSIXct(activity$date[6])
testdate
testdate + seconds(activity$interval[6])
activity$interval[456]
testdate <- as.POSIXct(activity$date[456])
testdate
testdate + seconds(activity$interval[456])
nrow(activity)
?manipulate
source(plyr)
source(dplyr)
library(dplyr)
?manipulate
?mutate
activity2 <- mutate(activity, timeinterval = as.POSIXct(activity$date) + seconds(activity$interval)
)
activity2
tail(activity2)
?plot
?group_by
?summarize
dailyavgs <- activity %>% group_by(timeinterval) %>% summarize(avgsteps = mean(steps))
activity <- activity2
dailyavgs <- activity %>% group_by(timeinterval) %>% summarize(avgsteps = mean(steps))
dailyavgs
tail(dailyavgs)
summary(dailyavgs)
dailyavgs <- activity %>% group_by(interval) %>% summarize(avgsteps = mean(steps))
dailyavgs
tail(dailyavgs)
summary(dailyavgs)
class(steps)
activity
head(activity)
dailyavgs <- activity %>% group_by(interval) %>% summarize(avgsteps = mean(activity$steps))
dailyavgs <- activity %>% group_by(interval) %>% summarize(avgsteps = mean(steps))
dailyavgs
str(dailyavgs)
summary(dailyavgs)
summarize(avgsteps = mean(activty$steps))
summarize(avgsteps = mean(activty, steps))
summarize(activity, avgsteps = mean(steps))
activity <- read.csv("activity.csv")
activity <- group_by(activity, interval)
head(activity)
activity <- tbl_df(activity)
activity <- group_by(activity, interval)
activity
activity <- summarize(group_by(activity, interval), mean(steps)
)
activity
summary(activity)
activity <- summarize(group_by(activity, interval), mean(as.numeric(steps)))
activity <- summarize(group_by(activity, interval), mean(as.numeric(activity$steps)))
activity
summary(activity)
activity <- summarize(group_by(activity, interval), avgsteps = mean(steps))
activity <- read.csv("activity.csv")
summary(activity)
dailyavgs <- summarize(group_by(activity, interval), avgsteps = mean(steps))
dailyavgs
summary(dailyavgs)
?mean
dailyavgs <- summarize(group_by(activity, interval), avgsteps = mean(steps, na.rm = TRUE))
summary(dailyavgs)
?plot
plot(dailyavgs$interval, dailyavgs$avgsteps)
plot(dailyavgs$interval, dailyavgs$avgsteps, type = "l")
?plot
plot(dailyavgs$interval, dailyavgs$avgsteps, type = "l", col = "blue", main = "Average Daily Activity Pattern", xlab = "Five second Intervals", ylab = "Avg. # of Steps")
?max
max(dailyavgs$steps)
max(dailyavgs$steps, na.rm = TRUE)
max(dailyavgs$avgsteps, na.rm = TRUE)
maxsteps <- activity$interval[which(max(dailyavgs$avgsteps, na.rm = TRUE))]
maxsteps <- dailyavgs$interval[which(dailyavgs$avgsteps == max(dailyavgs$avgsteps, na.rm = TRUE))]
masteps
maxsteps
dailyavgs$intervals[maxteps]
dailyavgs$intervals[maxsteps]
dailyavgs$interval[maxsteps]
dailyavgs[maxsteps]
summary(dailyavgs)
?arrange
arrange(dailyavgs, steps)
arrange(dailyavgs, avgsteps)
arrange(dailyavgs, desc(avgsteps))
maxsteps <- dailyavgs$interval[which(dailyavgs$avgsteps == max(dailyavgs$avgsteps, na.rm = TRUE))]
seconds(maxteps)
seconds(maxsteps)
?lubridate
hms(maxsteps)
maxsteps
seconds(maxsteps)
?strptime
strptime(maxsteps)
strptime(maxsteps, "%H:%M:%S")
strptime(seconds(maxsteps), "%H:%M:%S")
second(maxsteps)
seconds(maxsteps)
as.POSIXlt(seconds(maxsteps))
maxsteps / 60
